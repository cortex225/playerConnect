generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String         @id @default(cuid())
  name                   String?
  email                  String?        @unique
  emailVerified          DateTime?
  image                  String?
  role                   UserRole       @default(USER)
  isOnline               Boolean        @default(false)
  lastActivity           DateTime?
  stripeCustomerId       String?        @unique
  stripeSubscriptionId   String?        @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @default(now())
  password               String?
  accounts               Account[]
  athlete                Athlete?
  messagesReceived       Message[]      @relation("MessagesReceived")
  messagesSent           Message[]      @relation("MessagesSent")
  notifications          Notification[]
  recruiter              Recruiter?
  sessions               Session[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  recipientId String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  recipient   User     @relation("MessagesReceived", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User     @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Sport {
  id        String     @id @default(cuid())
  name      SportType  @unique
  athletes  Athlete[]
  levels    Level[]
  positions Position[]

  @@map("sports")
}

model Position {
  id           String            @id @default(cuid())
  name         String
  sportId      String
  athletes     AthletePosition[]
  kpis         KPI[]
  performances Performance[]
  sport        Sport             @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@unique([name, sportId])
  @@map("positions")
}

model Level {
  id         String     @id @default(cuid())
  name       String
  sportId    String
  categories Category[]
  sport      Sport      @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@unique([name, sportId])
  @@map("levels")
}

model Category {
  id       String        @id @default(cuid())
  name     CategoryLevel
  levelId  String
  athletes Athlete[]
  level    Level         @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([name, levelId])
  @@map("categories")
}

model Athlete {
  id            Int               @id @default(autoincrement())
  userId        String            @unique
  gender        Gender?
  age           Int?
  city          String?
  height        Float?
  weight        Float?
  dominantHand  DominantHand?
  dominantFoot  DominantFoot?
  programType   ProgramType?
  categoryId    String?
  sportId       String?
  positions     AthletePosition[]
  category      Category?         @relation(fields: [categoryId], references: [id])
  sport         Sport?            @relation(fields: [sportId], references: [id])
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  events        Event[]
  media         Media[]
  notifications Notification[]
  performances  Performance[]

  @@map("athletes")
}

model AthletePosition {
  id         String   @id @default(cuid())
  athleteId  Int
  positionId String
  athlete    Athlete  @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
}

model Performance {
  id         Int      @id @default(autoincrement())
  athleteId  Int
  positionId String
  date       DateTime
  score      Float
  KPI        KPI[]
  athlete    Athlete  @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
  stats      Stat[]

  @@map("performances")
}

model Stat {
  id            Int         @id @default(autoincrement())
  performanceId Int
  key           String
  value         Float
  performance   Performance @relation(fields: [performanceId], references: [id], onDelete: Cascade)

  @@map("stats")
}

model KPI {
  id            Int         @id @default(autoincrement())
  name          String
  weight        Float
  positionId    String
  performanceId Int
  value         Float
  performance   Performance @relation(fields: [performanceId], references: [id], onDelete: Cascade)
  position      Position    @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@map("kpis")
}

model Media {
  id          String   @id @default(cuid())
  athleteId   Int
  url         String
  description String?
  createdAt   DateTime @default(now())
  title       String
  type        String
  updatedAt   DateTime @updatedAt
  athlete     Athlete  @relation(fields: [athleteId], references: [id], onDelete: Cascade)

  @@map("media")
}

model Event {
  id                       Int          @id @default(autoincrement())
  athleteId                Int
  title                    String
  location                 String
  eventDate                DateTime
  isPublic                 Boolean
  requiresParentalApproval Boolean
  color                    String?
  description              String?
  endDate                  DateTime?
  athlete                  Athlete      @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  invitations              Invitation[]

  @@map("events")
}

model Invitation {
  id          Int       @id @default(autoincrement())
  eventId     Int
  recruiterId Int
  isIncognito Boolean
  status      String
  sentAt      DateTime  @default(now())
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model Recruiter {
  id            Int            @id @default(autoincrement())
  userId        String         @unique
  organization  String?
  position      String?
  region        String?
  experience    Int?
  invitations   Invitation[]
  notifications Notification[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recruiters")
}

model Notification {
  id          Int        @id @default(autoincrement())
  userId      String
  message     String
  isRead      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  athleteId   Int?
  athlete     Athlete?   @relation(fields: [athleteId], references: [id])
  userRef     User       @relation(fields: [userId], references: [id])
  Recruiter   Recruiter? @relation(fields: [recruiterId], references: [id])
  recruiterId Int?

  @@map("notifications")
}

enum UserRole {
  ADMIN
  USER
  ATHLETE
  RECRUITER
}

enum Gender {
  MASCULIN
  FEMININ
}

enum DominantHand {
  GAUCHE
  DROITE
}

enum DominantFoot {
  GAUCHE
  DROITE
}

enum ProgramType {
  CIVILE
  SCOLAIRE
  SCOLAIRE_CIVILE
}

enum SportType {
  BASKETBALL
  SOCCER
  FOOTBALL
  RUGBY
}

enum CategoryLevel {
  BENJAMIN
  CADET
  JUVENILE
  SENIOR
}
